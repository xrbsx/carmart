<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.jboss.quickstarts.jdg</groupId>
    <artifactId>jboss-carmart</artifactId>
    <version>7.1.0.Final-redhat-2</version>
    <packaging>war</packaging>
    <name>JBoss JDG Quickstart: carmart</name>
    <description>CarMart Single Node (No Cluster)</description>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <distribution>repo</distribution>
            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
        </license>
    </licenses>

    <properties>
        <!-- Explicitly declaring the source encoding eliminates the following 
            message: -->
        <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
            resources, i.e. build is platform dependent! -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- JBoss dependency versions -->
        <com.ocpsoft.prettyfaces.version>3.3.2</com.ocpsoft.prettyfaces.version>
        <version.jboss.weld>2.2.6.Final</version.jboss.weld>
        <version.com.sun.faces.jsf.impl>2.2.12</version.com.sun.faces.jsf.impl>

        <!-- This is the Management URL of EWS/Tomcat, so tomcat-maven-plugin 
            can deploy this quickstart on EWS/Tomcat through this URL -->
        <tomcat.management.url>http://localhost:8080/manager/text</tomcat.management.url>

        <version.org.infinispan>8.4.0.Final-redhat-2</version.org.infinispan>

        <version.jboss.spec.javaee.7.0>9.0.1.Final</version.jboss.spec.javaee.7.0>

        <version.commons.logging>1.1.1</version.commons.logging>
        <version.commons.codec>1.10</version.commons.codec>

        <!-- other plugin versions -->
        <version.tomcat.maven.plugin>1.1</version.tomcat.maven.plugin>
        <version.buildhelper.maven.plugin>1.7</version.buildhelper.maven.plugin>

        <!-- other plugin versions -->
        <version.war.plugin>2.2</version.war.plugin>

        <!-- maven-compiler-plugin -->
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.compiler.source>1.8</maven.compiler.source>

        <!-- test dependencies versions -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <browser>phantomjs</browser>

    </properties>


    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.infinispan</groupId>
                <artifactId>infinispan-bom</artifactId>
                <version>${version.org.infinispan}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Define the version of JBoss' Java EE 7 APIs we want to import.
                Any dependencies from org.wildfly.bom will have their version defined by this
                BOM -->
            <!-- JBoss distributes a complete set of Java EE 7 APIs including
                a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or
                a collection) of artifacts. We use this here so that we always get the correct
                versions of artifacts. Here we use the jboss-javaee-7-with-tools stack.
                The -with-tools means also versions of other artifacts like Arquillian. -->
            <dependency>
                <groupId>org.wildfly.bom</groupId>
                <artifactId>jboss-javaee-7.0-wildfly-with-tools</artifactId>
                <version>${version.jboss.spec.javaee.7.0}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Import Prettyfaces dependency. This is a UNSUPPORTED component -->
            <dependency>
                <groupId>com.ocpsoft</groupId>
                <artifactId>prettyfaces-jsf2</artifactId>
                <version>${com.ocpsoft.prettyfaces.version}</version>
                <scope>compile</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- this commons-codec dep has to be at the top so as to prevent errors like this one:
             https://issues.jboss.org/browse/ARQ-1456 -->
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${version.commons.codec}</version>
        </dependency>

        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>${version.commons.logging}</version>
        </dependency>

        <!-- First declare the APIs we depend on and need for compilation. 
            The dependencies with provided scope are provided by JBoss AS 7, The other 
            compile scoped dependencies will be add to the application libraries -->

        <!-- Import the JSF API, we use provided scope as the API is included 
            in JBoss AS 7 -->
        <dependency>
            <groupId>org.jboss.spec.javax.faces</groupId>
            <artifactId>jboss-jsf-api_2.2_spec</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the CDI API, we use provided scope as the API is included 
            in JBoss AS 7 -->
        <dependency>
            <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import Prettyfaces dependency. This is a UNSUPPORTED component -->
        <dependency>
            <groupId>com.ocpsoft</groupId>
            <artifactId>prettyfaces-jsf2</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Test dependencies -->
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.arquillian.graphene</groupId>
            <artifactId>graphene-webdriver</artifactId>
            <type>pom</type>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <!-- export browser property to arquillian.xml -->
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>

        <!-- Maven will append the version to the finalName (which is the 
            name given to the generated war, and hence the context root) -->
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${version.war.plugin}</version>
                <configuration>
                    <!-- Java EE 6 doesn't require web.xml, Maven needs to 
                        catch up! -->
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>

        <!-- This is the default profile (active by default) that uses the 
            src/local/java folder which provided local access to the cache (library mode) -->
        <profile>
            <id>library-eap</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.infinispan</groupId>
                    <artifactId>infinispan-embedded</artifactId>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <!-- This plugin will add the src/local/java source 
                            folder -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>${version.buildhelper.maven.plugin}</version>
                        <executions>
                            <execution>
                                <id>add-source</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>src/local/java</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                    </plugin>
                    <!-- Maven Surefire Plugin to skip tests on build -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skipTests>true</skipTests>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- This profile enable the client/server mode. The code from src/remote/java 
            will be used instead and them all connections to the cache will be made in 
            a remote JDG running instance -->
        <profile>
            <id>remote-eap</id>
            <!-- To connect to remote JDG, it is necessary to add the Hot Rod client -->
            <dependencies>
                <dependency>
                    <groupId>org.infinispan</groupId>
                    <artifactId>infinispan-remote</artifactId>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <!-- This plugin will add the src/remote/java source 
                        folder -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>${version.buildhelper.maven.plugin}</version>
                        <executions>
                            <execution>
                                <id>add-source</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>src/remote/java</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                    </plugin>
                    <!-- Maven Surefire Plugin to skip tests on build -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skipTests>true</skipTests>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <!-- This profile is intended to run this quickstart on ews/tomcat. 
                It has to embed some libraries that aren't available on ews/tomcat. -->
            <id>library-tomcat</id>
            <dependencies>

                <dependency>
                    <groupId>org.infinispan</groupId>
                    <artifactId>infinispan-embedded</artifactId>
                </dependency>

                <dependency>
                    <groupId>org.hibernate</groupId>
                    <artifactId>hibernate-entitymanager</artifactId>
                </dependency>

                <dependency>
                    <groupId>org.jboss.spec.javax.faces</groupId>
                    <artifactId>jboss-jsf-api_2.2_spec</artifactId>
                    <scope>compile</scope>
                </dependency>

                <!-- Import the JTA API -->
                <dependency>
                    <groupId>org.jboss.spec.javax.transaction</groupId>
                    <artifactId>jboss-transaction-api_1.1_spec</artifactId>
                </dependency>

                <!-- Import the WELD "uber-jar", meaning it bundles all the 
                    bits of Weld and CDI required for running in a Servlet container, for your 
                    convenience -->
                <dependency>
                    <groupId>org.jboss.weld.servlet</groupId>
                    <artifactId>weld-servlet</artifactId>
                    <version>${version.jboss.weld}</version>
                </dependency>

                <!-- Import the Mojarra JSF Impl, we use runtime scope as 
                    the Impl is not included in ews/tomcat -->
                <dependency>
                    <groupId>com.sun.faces</groupId>
                    <artifactId>jsf-impl</artifactId>
                    <version>${version.com.sun.faces.jsf.impl}</version>
                    <scope>runtime</scope>
                </dependency>

            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <!-- This plugin will add the src/tomcat/java source 
                            folder -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>${version.buildhelper.maven.plugin}</version>
                        <executions>
                            <execution>
                                <id>add-source</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>src/local/java</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- This plugin will add the src/main/webapp-tomcat7 
                            as webapp folder -->
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <version>${version.war.plugin}</version>
                        <configuration>
                            <webResources>
                                <resource>
                                    <directory>src/main/webapp-tomcat7</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </webResources>
                        </configuration>
                    </plugin>
                    <plugin>
                        <!-- The Tomcat Maven plugin deploys your war to 
                            a local ews/tomcat container -->
                        <!-- To use, run: mvn package tomcat:deploy -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>tomcat-maven-plugin</artifactId>
                        <version>${version.tomcat.maven.plugin}</version>
                        <configuration>
                            <server>tomcat</server>
                            <path>/${project.artifactId}</path>
                            <url>${tomcat.management.url}</url>
                            <update>true</update>
                        </configuration>
                    </plugin>
                    <!-- Maven Surefire Plugin to skip tests on build -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skipTests>true</skipTests>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        
        <profile>
            <!-- This profile is intended to run this quickstart on ews/tomcat. 
                It has to embed some libraries that aren't available on ews/tomcat. -->
            <id>remote-tomcat</id>
            <dependencies>

                <!-- To connect to remote JDG, it is necessary to add the Hot Rod client -->
                <dependency>
                    <groupId>org.infinispan</groupId>
                    <artifactId>infinispan-remote</artifactId>
                </dependency>

                <dependency>
                    <groupId>org.jboss.spec.javax.faces</groupId>
                    <artifactId>jboss-jsf-api_2.2_spec</artifactId>
                    <scope>compile</scope>
                </dependency>

                <!-- Import the JTA API -->
                <dependency>
                    <groupId>org.jboss.spec.javax.transaction</groupId>
                    <artifactId>jboss-transaction-api_1.1_spec</artifactId>
                </dependency>

                <!-- Import the WELD "uber-jar", meaning it bundles all the 
                    bits of Weld and CDI required for running in a Servlet container, for your 
                    convenience -->
                <dependency>
                    <groupId>org.jboss.weld.servlet</groupId>
                    <artifactId>weld-servlet</artifactId>
                    <version>${version.jboss.weld}</version>
                </dependency>

                <!-- Import the Mojarra JSF Impl, we use runtime scope as 
                    the Impl is not included in ews/tomcat -->
                <dependency>
                    <groupId>com.sun.faces</groupId>
                    <artifactId>jsf-impl</artifactId>
                    <version>${version.com.sun.faces.jsf.impl}</version>
                    <scope>runtime</scope>
                </dependency>

            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <!-- This plugin will add the src/remote/java source 
                            folder -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>${version.buildhelper.maven.plugin}</version>
                        <executions>
                            <execution>
                                <id>add-source</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>src/remote/java</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- This plugin will add the src/main/webapp-tomcat7 
                            as webapp folder -->
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <version>${version.war.plugin}</version>
                        <configuration>
                            <webResources>
                                <resource>
                                    <directory>src/main/webapp-tomcat7</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </webResources>
                        </configuration>
                    </plugin>
                    <plugin>
                        <!-- The Tomcat Maven plugin deploys your war to 
                            a local ews/tomcat container -->
                        <!-- To use, run: mvn package tomcat:deploy -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>tomcat-maven-plugin</artifactId>
                        <version>${version.tomcat.maven.plugin}</version>
                        <configuration>
                            <server>tomcat</server>
                            <path>/${project.artifactId}</path>
                            <url>${tomcat.management.url}</url>
                            <update>true</update>
                        </configuration>
                    </plugin>
                    <!-- Maven Surefire Plugin to skip tests on build -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skipTests>true</skipTests>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- This profile is for running tests on EAP -->
        <profile>
            <id>uitests-eap</id>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-managed</artifactId>
                </dependency>
                <dependency>
                    <groupId>org.jboss.arquillian.protocol</groupId>
                    <artifactId>arquillian-protocol-servlet</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <!-- This plugin will add the src/local/java source
                            folder -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>${version.buildhelper.maven.plugin}</version>
                        <executions>
                            <execution>
                                <id>add-source</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>src/local/java</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <reportNameSuffix>uitests-eap</reportNameSuffix>
                            <systemPropertyVariables>
                                <carmart.war.directory>${basedir}/target</carmart.war.directory>
                                <carmart.war.file>${project.artifactId}.war</carmart.war.file>
                            </systemPropertyVariables>
                            <systemProperties>
                                <arquillian.launch>jbossas-managed</arquillian.launch>
                            </systemProperties>
                            <!-- Added so selenium doesn't print it's INFO logs to console (there's a LOT of them -
                                 like 5000 lines for each run) - they are instead appended (important when
                                 there are multiple profiles) to <module>/target/jul-info.log (warnings are printed in console) -->
                            <argLine>-Djava.util.logging.config.file=${basedir}/src/test/resources/logging.properties</argLine>
                        </configuration>

                    </plugin>

                </plugins>
            </build>
        </profile>

        <!-- This profile is for running tests on Tomcat -->
        <profile>
            <id>uitests-tomcat</id>
            <dependencies>
                <!-- container adapter for Tomcat managed -->
                <dependency>
                    <groupId>org.jboss.arquillian.container</groupId>
                    <artifactId>arquillian-tomcat-managed-7</artifactId>
                    <version>1.0.0.CR4</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <!-- This plugin will add the src/tomcat/java source
                            folder -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>${version.buildhelper.maven.plugin}</version>
                        <executions>
                            <execution>
                                <id>add-source</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>src/local/java</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <reportNameSuffix>uitests-tomcat</reportNameSuffix>
                            <systemPropertyVariables>
                                <carmart.war.directory>${basedir}/target</carmart.war.directory>
                                <carmart.war.file>${project.artifactId}.war</carmart.war.file>
                            </systemPropertyVariables>
                            <systemProperties>
                                <arquillian.launch>tomcat-managed-7</arquillian.launch>
                            </systemProperties>
                            <!-- Added so selenium doesn't print it's INFO logs to console (there's a LOT of them -
                                 like 5000 lines for each run) - they are instead appended (important when
                                 there are multiple profiles) to <module>/target/jul-info.log (warnings are printed in console) -->
                            <argLine>-Djava.util.logging.config.file=${basedir}/src/test/resources/logging.properties</argLine>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- This profile is for running tests in Client-Server mode -->
        <profile>
            <id>uitests-remote</id>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-managed</artifactId>
                </dependency>
                <dependency>
                    <groupId>org.jboss.arquillian.protocol</groupId>
                    <artifactId>arquillian-protocol-servlet</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <!-- This plugin will add the src/remote/java source
                        folder -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>${version.buildhelper.maven.plugin}</version>
                        <executions>
                            <execution>
                                <id>add-source</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>src/remote/java</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <reportNameSuffix>uitests-remote</reportNameSuffix>
                            <systemPropertyVariables>
                                <carmart.war.directory>${basedir}/target</carmart.war.directory>
                                <carmart.war.file>${project.artifactId}.war</carmart.war.file>
                            </systemPropertyVariables>
                            <systemProperties>
                                <arquillian.launch>jbossPlusJdg</arquillian.launch>
                            </systemProperties>
                            <!-- Added so selenium doesn't print it's INFO logs to console (there's a LOT of them -
                                 like 5000 lines for each run) - they are instead appended (important when
                                 there are multiple profiles) to <module>/target/jul-info.log (warnings are printed in console) -->
                            <argLine>-Djava.util.logging.config.file=${basedir}/src/test/resources/logging.properties</argLine>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>

